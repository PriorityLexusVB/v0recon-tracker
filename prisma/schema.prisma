generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  teamMembers   TeamMember[]
  assignments   VehicleAssignment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vehicle {
  id          String   @id @default(cuid())
  vin         String   @unique
  make        String
  model       String
  year        Int
  color       String?
  status      String   @default("PENDING")
  priority    String   @default("MEDIUM")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  assignments VehicleAssignment[]
  tasks       Task[]
}

model Team {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     TeamMember[]
  assignments VehicleAssignment[]
}

model TeamMember {
  id     String @id @default(cuid())
  userId String
  teamId String
  role   String @default("MEMBER")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

model VehicleAssignment {
  id        String   @id @default(cuid())
  vehicleId String
  teamId    String
  userId    String?
  status    String   @default("ASSIGNED")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])
}

model Task {
  id          String   @id @default(cuid())
  vehicleId   String
  title       String
  description String?
  status      String   @default("PENDING")
  priority    String   @default("MEDIUM")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

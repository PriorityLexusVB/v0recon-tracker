generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER") // e.g., "USER", "ADMIN", "MANAGER"
  status        String    @default("ACTIVE") // e.g., "ACTIVE", "INACTIVE", "PENDING"
  teamId        String?
  team          Team?     @relation(fields: [teamId], references: [id])
  accounts      Account[]
  sessions      Session[]
  vehicles      Vehicle[]
  notifications Notification[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Vehicle {
  id               String    @id @default(cuid())
  vin              String    @unique
  stockNumber      String?
  year             Int
  make             String
  model            String
  trim             String?
  color            String?
  mileage          Int?
  status           String    @default("IN_PROGRESS") // e.g., "IN_PROGRESS", "COMPLETED", "ON_HOLD"
  currentLocation  String?
  assignedToId     String?
  assignedTo       User?     @relation(fields: [assignedToId], references: [id])
  reconditioningCost Float?
  daysInRecon      Int       @default(0)
  lastUpdated      DateTime  @updatedAt
  createdAt        DateTime  @default(now())
  timelineEvents   TimelineEvent[]
}

model TimelineEvent {
  id          String   @id @default(cuid())
  vehicleId   String
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  eventType   String   // e.g., "CHECK_IN", "DEPARTMENT_CHANGE", "COMPLETED", "NOTE"
  description String?
  timestamp   DateTime @default(now())
  department  String?  // e.g., "MECHANICAL", "BODY_SHOP", "DETAIL"
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // e.g., "VEHICLE_COMPLETED", "ASSIGNMENT_UPDATE", "SYSTEM_ALERT"
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  status    String   @default("PENDING") // e.g., "PENDING", "SENT", "FAILED"
}

model Team {
  id        String   @id @default(cuid())
  name      String   @unique
  description String?
  members   User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
